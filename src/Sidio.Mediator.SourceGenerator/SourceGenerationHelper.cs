using System.Text;

namespace Sidio.Mediator.SourceGenerator;

internal static class SourceGenerationHelper
{
    private const string Spacing = "    ";

    private const string ClassHeader =
"// <auto-generated/>\n" +
"#nullable enable\n" +
"#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member\n" +
"#pragma warning disable SA1600 // Elements should be documented\n";

    public const string MediatorPartialClassSource = ClassHeader + @"
namespace Sidio.Mediator
{
    using System;
    using System.Threading.Tasks;
    using Microsoft.Extensions.DependencyInjection;

    public partial interface IMediator
    {
    }

    public partial class Mediator : IMediator
    {
        private readonly IServiceProvider _serviceProvider;

        public Mediator(IServiceProvider serviceProvider)
        {
            if (serviceProvider == null)
            {
                throw new ArgumentNullException(nameof(serviceProvider));
            }

            _serviceProvider = serviceProvider;
        }
    }

    public static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddMediatorService(this IServiceCollection services, ServiceLifetime lifetime = ServiceLifetime.Scoped)
        {
            if (services == null)
            {
                throw new ArgumentNullException(nameof(services));
            }

            var serviceDescriptor = new ServiceDescriptor(typeof(IMediator), typeof(Mediator), lifetime);
            services.Add(serviceDescriptor);
            return services;
        }
    }
}";
    
    public static string GenerateClass(RequestToGenerate requestToGenerate)
    {
        var usings = new HashSet<string>
        {
            "System.Threading",
            "System.Threading.Tasks",
            "Microsoft.Extensions.DependencyInjection"
        };

        foreach(var u in requestToGenerate.Usings)
        {
            usings.Add(u);
        }

        if (requestToGenerate.IsHttpRequest)
        {
            usings.Add("Sidio.Mediator.Http");
        }

        if (!string.IsNullOrWhiteSpace(requestToGenerate.NamespaceName))
        {
            usings.Add(requestToGenerate.NamespaceName);
        }

        var httpPrefix = requestToGenerate.IsHttpRequest ? "Http" : string.Empty;

        var sb = new StringBuilder();
        sb.AppendLine(ClassHeader);
        sb.AppendLine("namespace Sidio.Mediator");
        sb.AppendLine("{");
        foreach (var u in usings)
        {
            sb.AppendLine($"{Spacing}using {u};");
        }

        // interface
        sb.AppendLine();
        sb.AppendLine($"{Spacing}public partial interface IMediator");
        sb.AppendLine($"{Spacing}{{");
        if (requestToGenerate.ReturnType is not null)
        {
            sb.AppendLine($"{Spacing}{Spacing}Task<{httpPrefix}Result<{requestToGenerate.ReturnType}>> {requestToGenerate.ClassName}Async({requestToGenerate.ClassName} request, CancellationToken cancellationToken = default);");
        }
        else
        {
            sb.AppendLine($"{Spacing}{Spacing}Task<Result> {requestToGenerate.ClassName}Async({requestToGenerate.ClassName} request, CancellationToken cancellationToken = default);");
        }

        sb.AppendLine($"{Spacing}}}\n"); // interface IMediator

        // class
        sb.AppendLine($"{Spacing}public partial class Mediator");
        sb.AppendLine($"{Spacing}{{");

        if (requestToGenerate.ReturnType is not null)
        {
            sb.AppendLine($"{Spacing}{Spacing}public Task<{httpPrefix}Result<{requestToGenerate.ReturnType}>> {requestToGenerate.ClassName}Async({requestToGenerate.ClassName} request, CancellationToken cancellationToken = default)");
        }
        else
        {
            sb.AppendLine($"{Spacing}{Spacing}public Task<Result> {requestToGenerate.ClassName}Async({requestToGenerate.ClassName} request, CancellationToken cancellationToken = default)");
        }

        sb.AppendLine($"{Spacing}{Spacing}{{");

        sb.AppendLine($"{Spacing}{Spacing}{Spacing}var requestHandler = _serviceProvider.GetRequiredService<{requestToGenerate.RequestHandlerInterface}>();");
        sb.AppendLine($"{Spacing}{Spacing}{Spacing}return requestHandler.HandleAsync(request, cancellationToken);");

        sb.AppendLine($"{Spacing}{Spacing}}}"); // function
        sb.AppendLine($"{Spacing}}}"); // class Mediator
        sb.AppendLine("}"); // namespace

        return sb.ToString();
    }
}